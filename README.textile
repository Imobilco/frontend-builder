Ant-cборщик JS и CSS файлов через Google Closure Compiler/YUICompressor, 
оптимизированный специально для систем версионного контроля. Во время сборки
создаётся специальный файл @.build_catalog@, в котором хранится описание всех
собранных файлов. В момент следующей сборки происходит сравнение структур 
текущего (собираемого) файла и его описанием в каталоге: если они различаются —
файл собирается заново, если нет — ничего не происходит. Таким образом, 
экономится процессорное время и не сбрасывается кэш с собранных файлов.

h2. Подключение

Для подключения сборщика нужно:

* Скачать "последнюю сборку":https://github.com/Imobilco/frontend-builder/downloads 
* Подключить новые задачи в Ant-file:

<pre><code>
<?xml version="1.0" encoding="UTF-8"?>
<project name="Compiler test">
	<taskdef resource="org/apache/tools/ant/taskdefs/default.properties">
		<classpath>
			<pathelement location="path/to/frontend-builder.jar" />
			<pathelement location="path/to/compiler.jar"/>
			<pathelement location="path/to/yuicompressor.jar"/>
		</classpath>
	</taskdef>
    ...
</project>
</code></pre>

h2. Список задач

h3. @<compile-js>@

Сборщик JS-файлов. Файлы по умолчанию собираются через Google Closure Compiler, можно переключить в сборку через YUICompressor.

h4. Атрибуты:

* @destfile@ – собрать все файлы в один и сохранить их в @destfile@
* @destdir@ – сделать минифицированную копию всех файлов и сохранить их в @destdir@. _Сами файлы вместе не склеиваются_
* @useclosure@ — использовать Google Closure Compiler (по умолчанию — @true@) для сборки. При значении @false@ используется YUICompressor
* @force@ — принудительно пересобрать файлы (даже если они не менялись)

h4. Внутренние элементы

Внутри @<compile-js>@ можно указывать стандартные @<filelist>@ и @<fileset>@ типы.

h3. @<compile-css>@

Сборщик CSS файлов. Во время сборки все @import@-конструкции, в которых имена файлов начинаются с подчёркивания, автоматически заменяются содержимым этих файлов. 

h4. Атрибуты:

* @dir@ — папка, из которой нужно достать и минифицировать все CSS-файлы
* @todir@ — папка, в которую нужно сохранить минифицированные файлы
* @webroot@ — папка с корнем веб-пространства, относительно которого нужно резолвить абсолютные пути (например, при подключении @import url(/file.css);@). Если не указана, используется @${basedir}@ Ant-сборщика
* @force@ — принудительно пересобрать файлы (даже если они не менялись)

h4. Внутренние элементы

Внутри @<compile-js>@ можно указывать стандартные @<filelist>@ и @<fileset>@ типы.

h3. @<save-catalog>@

Сохранение структуры библиотек (каталог) в виде XML-файла для дальнейшего использования (например, на сайте, для автоматического маппинга исходного кода к собранным файлам).

h4. Атрибуты:

* @destfile@ — куда сохранять каталог
* @webroot@ – корень веб-пространства сайта. Относительно него будут строится все пути к файлам в каталоге
* @absolute@ – сделать все пути в каталоге абсолютными (относительно @webroot@)

h2. Примеры вызовов

* Собрать @file1.js@ и @file2.js@ в @file1.js@:

<pre><code>
<compile-js destfile="${basedir}/file.js">
	<filelist dir="${basedir}">
		<file name="file1.js"/>
		<file name="file2.js"/>
	</filelist>
</compile-js>
</code></pre>

* Сделать минифицированную копию всех JS-файлов в папке @src@ и сохранить их в @compiled@:

<pre><code>
<compile-js destdir="./compiled">
	<fileset dir="./src" includes="*.js" />
</compile-js>
</code></pre>

* Собрать все CSS-файлы внутри папки @css@ и сохранить результат в папку @c@:
<pre><code>
<compile-css dir="./css" todir="./c"/>
</code></pre>
